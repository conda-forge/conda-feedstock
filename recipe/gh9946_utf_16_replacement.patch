diff --git a/conda/core/portability.py b/conda/core/portability.py
index 0a5605886..f33ba62b3 100644
--- a/conda/core/portability.py
+++ b/conda/core/portability.py
@@ -68,21 +68,50 @@ def update_prefix(path, new_prefix, placeholder=PREFIX_PLACEHOLDER, mode=FileMod
 
 
 def replace_prefix(mode, data, placeholder, new_prefix):
-    if mode == FileMode.text:
-        data = data.replace(placeholder.encode('utf-8'), new_prefix.encode('utf-8'))
-    elif mode == FileMode.binary:
-        data = binary_replace(data, placeholder.encode('utf-8'), new_prefix.encode('utf-8'))
-    else:
-        raise CondaIOError("Invalid mode: %r" % mode)
+    popular_encodings = [
+        'utf_8',
+        # Make sure to specify -le and -be so that the UTF endian prefix
+        # doesn't show up in the string
+        'utf_16_le', 'utf_16_be',
+        'utf_32_le', 'utf_32_be'
+    ]
+    for encoding in popular_encodings:
+        try:
+            if mode == FileMode.text:
+                data = data.replace(placeholder.encode(encoding),
+                                    new_prefix.encode(encoding))
+            elif mode == FileMode.binary:
+                data = binary_replace(data,
+                                      placeholder.encode(encoding),
+                                      new_prefix.encode(encoding),
+                                      encoding=encoding)
+            else:
+                raise CondaIOError("Invalid mode: %r" % mode)
+        except LookupError:
+            # 202108/08 - hmaarrfk - I believe that
+            # A LookupError can occur when a re-installation of python
+            # is happening. The encoding will not have been cached by python
+            # before the python ugprade occurs, then during the upgrade
+            # the specific python files cannot be found since they are in
+            # effect "lazy loaded".
+            # Because this is only expceted to happen when python is being
+            # reinstalled, we decide to silently ignore these errors
+            pass
     return data
 
 
-def binary_replace(data, a, b):
+def binary_replace(data, a, b, encoding='utf_8'):
     """
     Perform a binary replacement of `data`, where the placeholder `a` is
     replaced with `b` and the remaining string is padded with null characters.
     All input arguments are expected to be bytes objects.
+
+    Parameters
+    ----------
+    encoding: str
+        The encoding of the expected string in the binary.
     """
+    zeros = '\0'.encode(encoding)
     if on_win:
         # on Windows for binary files, we currently only replace a pyzzer-type entry point
         #   we skip all other prefix replacement
@@ -99,7 +128,10 @@ def binary_replace(data, a, b):
         return match.group().replace(a, b) + b'\0' * padding
 
     original_data_len = len(data)
-    pat = re.compile(re.escape(a) + b'([^\0]*?)\0')
+    pat = re.compile(
+        re.escape(a) +
+        b'(?:(?!(?:' + zeros + b')).)*' + zeros
+    )
     data = pat.sub(replace, data)
     assert len(data) == original_data_len
 
diff --git a/tests/test_install.py b/tests/test_install.py
index 858c8a720..611daf790 100644
--- a/tests/test_install.py
+++ b/tests/test_install.py
@@ -34,9 +34,14 @@ class TestBinaryReplace(unittest.TestCase):
 
     @pytest.mark.xfail(on_win, reason="binary replacement on windows skipped", strict=True)
     def test_simple(self):
-        self.assertEqual(
-            binary_replace(b'xxxaaaaaxyz\x00zz', b'aaaaa', b'bbbbb'),
-            b'xxxbbbbbxyz\x00zz')
+        for encoding in ['utf_8', 'utf_16_le', 'utf_16_be', 'utf_32_le', 'utf_32_be']:
+            a = 'aaaaa'.encode(encoding)
+            b = 'bbbb'.encode(encoding)
+            data   = 'xxxaaaaaxyz\0zz'.encode(encoding)
+            result = 'xxxbbbbxyz\0\0zz'.encode(encoding)
+            self.assertEqual(
+                binary_replace(data, a, b, encoding=encoding),
+                result)
 
     @pytest.mark.xfail(on_win, reason="binary replacement on windows skipped", strict=True)
     def test_shorter(self):
